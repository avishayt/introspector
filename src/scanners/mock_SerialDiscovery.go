// Code generated by mockery v1.0.0. DO NOT EDIT.

package scanners

import (
	ghw "github.com/jaypipes/ghw"
	mock "github.com/stretchr/testify/mock"
)

// MockSerialDiscovery is an autogenerated mock type for the SerialDiscovery type
type MockSerialDiscovery struct {
	mock.Mock
}

// Baseboard provides a mock function with given fields: opts
func (_m *MockSerialDiscovery) Baseboard(opts ...*ghw.WithOption) (*ghw.BaseboardInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ghw.BaseboardInfo
	if rf, ok := ret.Get(0).(func(...*ghw.WithOption) *ghw.BaseboardInfo); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ghw.BaseboardInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*ghw.WithOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Product provides a mock function with given fields: opts
func (_m *MockSerialDiscovery) Product(opts ...*ghw.WithOption) (*ghw.ProductInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ghw.ProductInfo
	if rf, ok := ret.Get(0).(func(...*ghw.WithOption) *ghw.ProductInfo); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ghw.ProductInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*ghw.WithOption) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
